<!DOCTYPE html>
<html lang="pt-BR">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Curso Responsivo - Player Fullscreen</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <style>
    /* Player em tela cheia */
    .fullscreen-player {
      position: fixed;
      top: 0;
      left: 0;
      width: 100vw;
      height: 100vh;
      z-index: 9999;
      background: #000;
    }
    
    .fullscreen-player iframe {
      width: 100%;
      height: 100%;
    }
    
    /* Overlay para controles */
    .player-overlay {
      position: absolute;
      top: 0;
      right: 0;
      z-index: 10000;
      background: rgba(0, 0, 0, 0.8);
      padding: 1rem;
      border-radius: 0 0 0 1rem;
    }
    
    /* Animações */
    .slide-in-left {
      animation: slideInLeft 0.3s ease-out;
    }
    
    .fade-in {
      animation: fadeIn 0.3s ease-out;
    }
    
    @keyframes slideInLeft {
      from {
        transform: translateX(-100%);
      }
      to {
        transform: translateX(0);
      }
    }
    
    @keyframes fadeIn {
      from {
        opacity: 0;
      }
      to {
        opacity: 1;
      }
    }
    
    /* Scrollbar personalizada */
    ::-webkit-scrollbar {
      width: 8px;
    }
    
    ::-webkit-scrollbar-track {
      background: #374151;
    }
    
    ::-webkit-scrollbar-thumb {
      background: #6B7280;
      border-radius: 4px;
    }
    
    ::-webkit-scrollbar-thumb:hover {
      background: #9CA3AF;
    }
  </style>
</head>
<body class="bg-gray-900 text-white font-sans overflow-hidden">

  <!-- Header mobile -->
  <header class="md:hidden bg-gray-800 px-4 py-3 flex justify-between items-center shadow-lg z-50 relative">
    <h1 class="font-bold text-lg">📚 Curso Online</h1>
    <div class="flex items-center space-x-3">
      <button id="menuToggle" class="text-white focus:outline-none hover:text-blue-400 transition-colors">
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
        </svg>
      </button>
    </div>
  </header>

  <div class="flex flex-col md:flex-row h-screen">
    <!-- Sidebar -->
    <aside id="sidebar" class="w-full md:w-80 bg-gray-800 overflow-y-auto hidden md:block slide-in-left shadow-2xl">
      <div class="p-5">
        <div class="flex items-center justify-between mb-4 border-b border-gray-700 pb-3">
          <h2 class="text-xl font-bold">📖 Conteúdo da Matéria</h2>
        </div>
        
        <div class="space-y-2">
			<% aulas.forEach(dados=> { %>
				<div class="video-item bg-gray-700 border border-gray-600 rounded-lg px-4 py-3 cursor-pointer hover:bg-gray-600 hover:border-blue-500 transition-all duration-200 transform hover:scale-[1.02]" data-video="https://www.youtube.com/embed/<%= dados.id_videos %>" data-idVideo="<%= dados.id_videos %>">
					<div class="flex justify-between items-center">
						<h3 class="font-semibold text-sm">🎥 <%= dados.descricao %></h3>
					</div>
					<p class="text-xs text-gray-400 mt-1"><%= nome_materia %></p>
				</div>
			<% }) %>
			<!-- Menu de Navegação -->
			<div class="p-4 border-t border-gray-700 mt-4">
			  <button id="voltarBtn" class="w-full flex items-center justify-center space-x-2 bg-gradient-to-r from-gray-600 to-gray-700 hover:from-gray-700 hover:to-gray-800 text-white px-4 py-3 rounded-lg transition-all duration-200 transform hover:scale-105 shadow-lg">
				<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
				  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
				</svg>
				<span class="font-medium">Voltar para Matérias</span>
			  </button>
			  
			  
			</div>
        </div>
      </div>
    </aside>

    <!-- Main Content - Player de Vídeo -->
    <main class="flex-1 relative overflow-hidden">
      <!-- Player de Vídeo -->
      <div id="videoContainer" class="w-full h-full relative bg-black">
        <iframe
          id="videoPlayer"
          class="w-full h-full"
          src=""
          title="YouTube video player"
          frameborder="0"
          allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
          allowfullscreen
        ></iframe>
      </div>
      
      <!-- Controles do Player -->
      <div id="playerControls" class="absolute bottom-4 left-4 right-4 bg-black bg-opacity-75 rounded-lg p-4 flex items-center justify-between backdrop-blur-sm">
        <div class="flex items-center space-x-4">
          <h3 id="currentVideoTitle" class="text-white font-semibold">🎥 Selecione uma aula</h3>
        </div>
        
        <div class="flex items-center justify-center">
          <button id="actionBtn" class="bg-red-600 hover:bg-red-700 text-white font-bold px-6 py-2 rounded-lg shadow-lg transition-all transform hover:scale-105">
            ✅ Concluir Aula
          </button>
        </div>
      </div>
    </main>
  </div>

  <!-- Player Fullscreen -->
  <div id="fullscreenPlayer" class="fullscreen-player hidden">
    <iframe
      id="fullscreenIframe"
      src=""
      title="YouTube video player"
      frameborder="0"
      allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
      allowfullscreen
    ></iframe>
    
    <!-- Controles Fullscreen -->
    <div class="player-overlay">
      <div class="flex items-center space-x-3">
        <button id="exitFullscreen" class="bg-red-600 hover:bg-red-700 text-white p-2 rounded-lg transition-colors" title="Sair da Tela Cheia">
          <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
            <path d="M5 16h3v3h2v-5H5v2zm3-8H5v2h5V5H8v3zm6 11h2v-3h3v-2h-5v5zm2-11V5h-2v5h5V8h-3z"/>
          </svg>
        </button>
        
        <button id="toggleSidebarFullscreen" class="bg-blue-600 hover:bg-blue-700 text-white p-2 rounded-lg transition-colors" title="Menu">
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
          </svg>
        </button>
      </div>
    </div>
  </div>

<script>
  // Elementos
  const items = document.querySelectorAll('.video-item');
  const player = document.getElementById('videoPlayer');
  const fullscreenPlayer = document.getElementById('fullscreenPlayer');
  const fullscreenIframe = document.getElementById('fullscreenIframe');
  const menuToggle = document.getElementById('menuToggle');
  const sidebar = document.getElementById('sidebar');
  const actionBtn = document.getElementById('actionBtn');
  const currentVideoTitle = document.getElementById('currentVideoTitle');
  const fullscreenToggle = document.getElementById('fullscreenToggle');
  const exitFullscreen = document.getElementById('exitFullscreen');
  const toggleSidebarFullscreen = document.getElementById('toggleSidebarFullscreen');
  const voltarBtn = document.getElementById('voltarBtn');
  const homeBtn = document.getElementById('homeBtn');
  const menuBtn = document.getElementById('menuBtn');

  let videoSelecionadoId = null;
  let currentVideoData = null;
  let isFullscreen = false;

  // Função para atualizar o player
  function updatePlayer(videoUrl, videoId, title) {
    const targetPlayer = isFullscreen ? fullscreenIframe : player;
    targetPlayer.src = videoUrl + "?autoplay=0&controls=1&rel=0&modestbranding=1";
    videoSelecionadoId = videoId;
    currentVideoData = { url: videoUrl, id: videoId, title: title };
    currentVideoTitle.textContent = title;
    
    // Marca o item ativo
    items.forEach(item => item.classList.remove('ring-2', 'ring-blue-500', 'bg-blue-800'));
    document.querySelector(`[data-idVideo="${videoId}"]`)?.classList.add('ring-2', 'ring-blue-500', 'bg-blue-800');
  }

  // Event listeners para itens de vídeo
  items.forEach(item => {
    item.addEventListener('click', () => {
      const videoUrl = item.getAttribute('data-video');
      const id = item.getAttribute('data-idVideo');
      const title = item.querySelector('h3').textContent;
      
      updatePlayer(videoUrl, id, title);

      // RESET COMPLETO: Para timer anterior e reinicia countdown
      console.log(`🔄 Trocando para aula ${id} - Resetando timer do botão`);
      disableButtonWithCountdown();

      // Fecha o menu no mobile
      if (window.innerWidth < 768) {
        sidebar.classList.add('hidden');
      }
    });
  });

  // Toggle sidebar
  function toggleSidebarVisibility() {
    sidebar.classList.toggle('hidden');
    sidebar.classList.toggle('slide-in-left');
  }

  menuToggle?.addEventListener('click', toggleSidebarVisibility);
  toggleSidebarFullscreen?.addEventListener('click', toggleSidebarVisibility);

  // Menu de navegação
  voltarBtn?.addEventListener('click', () => {
    // Efeito visual
    voltarBtn.style.transform = 'scale(0.95)';
    setTimeout(() => {
      voltarBtn.style.transform = '';
    }, 150);
    
    // Confirma antes de sair
    if (confirm('🔙 Deseja voltar para a página de matérias?\n\n')) {
      //alert('📚 Redirecionando para página de MATÉRIAS...\n\nVocê será direcionado para escolher outra disciplina.');
      // Simula redirecionamento
      // window.history.back(); ou window.location.href = '/materias';
	  window.location.href = '/user/materias/<%= uid_usuario %>';
    }
  });

  homeBtn?.addEventListener('click', () => {
    homeBtn.style.transform = 'scale(0.95)';
    setTimeout(() => {
      homeBtn.style.transform = '';
    }, 150);
    
    alert('🏠 Redirecionando para PÁGINA PRINCIPAL...\n\nVocê será direcionado para o dashboard principal.');
    // window.location.href = '/dashboard';
  });

  menuBtn?.addEventListener('click', () => {
    menuBtn.style.transform = 'scale(0.95)';
    setTimeout(() => {
      menuBtn.style.transform = '';
    }, 150);
    
    // Toggle do sidebar no mobile/desktop
    toggleSidebarVisibility();
  });

  // Fullscreen functionality
  function enterFullscreen() {
    if (currentVideoData) {
      fullscreenIframe.src = currentVideoData.url + "?autoplay=0&controls=1&rel=0&modestbranding=1";
    }
    fullscreenPlayer.classList.remove('hidden');
    fullscreenPlayer.classList.add('fade-in');
    isFullscreen = true;
    document.body.style.overflow = 'hidden';
  }

  function exitFullscreenMode() {
    fullscreenPlayer.classList.add('hidden');
    fullscreenIframe.src = '';
    isFullscreen = false;
    document.body.style.overflow = 'auto';
    
    // Retorna o vídeo para o player normal
    if (currentVideoData) {
      player.src = currentVideoData.url + "?autoplay=0&controls=1&rel=0&modestbranding=1";
    }
  }

  exitFullscreen?.addEventListener('click', exitFullscreenMode);

  // Esc key para sair do fullscreen
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape' && isFullscreen) {
      exitFullscreenMode();
    }
  });

  // Evento do botão de ação
  actionBtn?.addEventListener('click', () => {
    if (videoSelecionadoId) {
      // Verifica se o botão não está desabilitado
      if (actionBtn.disabled) {
        return;
      }
      
      // Efeito visual
      actionBtn.classList.add('scale-95');
      setTimeout(() => {
        actionBtn.classList.remove('scale-95');
      }, 150);
      
      // Alert de conclusão
      alert(`🎉 Parabéns! Aula ${videoSelecionadoId} concluída com sucesso!\n\n✅ Progresso salvo automaticamente\n📈 Continue seus estudos para avançar no curso`);
      
      // Simula conclusão da aula
      const notification = document.createElement('div');
      notification.className = 'fixed top-4 right-4 bg-green-600 text-white px-6 py-3 rounded-lg shadow-lg z-50 fade-in';
      notification.innerHTML = `
        <div class="flex items-center space-x-2">
          <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
            <path d="M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z"/>
          </svg>
          <span>Aula ${videoSelecionadoId} concluída!</span>
        </div>
      `;
      document.body.appendChild(notification);
      
      setTimeout(() => {
        notification.remove();
      }, 3000);
    } else {
      alert('Selecione uma aula primeiro!');
    }
  });

  // Responsive adjustments
  window.addEventListener('resize', () => {
    if (window.innerWidth >= 768) {
      sidebar.classList.remove('hidden');
    } else {
      // sidebar.classList.add('hidden');
    }
  });

  // Variável global para controlar o timer
  let currentTimer = null;

  // Função para limpar timer anterior
  function clearCurrentTimer() {
    if (currentTimer) {
      clearInterval(currentTimer);
      currentTimer = null;
    }
  }

  // Função para resetar botão ao estado original
  function resetButtonToOriginal() {
    if (!actionBtn) return;
    
    // Limpa timer atual se existir
    clearCurrentTimer();
    
    // Restaura estado original
    actionBtn.disabled = false;
    actionBtn.classList.remove('opacity-50', 'cursor-not-allowed', 'animate-pulse');
    actionBtn.classList.add('hover:bg-red-700', 'transform', 'hover:scale-105');
    actionBtn.style.backgroundColor = '';
    actionBtn.innerHTML = '✅ Concluir Aula';
  }

  // Função para desabilitar/habilitar botão com countdown
  function disableButtonWithCountdown() {
    if (!actionBtn) return;
    
    // Limpa qualquer timer anterior antes de iniciar novo
    clearCurrentTimer();
    
    let countdown = 40 * 60; // 40 minutos em segundos
    actionBtn.disabled = true;
    actionBtn.classList.add('opacity-50', 'cursor-not-allowed');
    actionBtn.classList.remove('hover:bg-red-700', 'transform', 'hover:scale-105', 'animate-pulse');
    actionBtn.style.backgroundColor = '';
    
    const originalText = '✅ Concluir Aula';
    
    const formatTime = (seconds) => {
      const minutes = Math.floor(seconds / 60);
      const remainingSeconds = seconds % 60;
      return `${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`;
    };
    
    const updateButtonText = () => {
      const timeFormatted = formatTime(countdown);
      actionBtn.innerHTML = `
        <div class="flex items-center space-x-2">
          <svg class="w-5 h-5 animate-spin" fill="currentColor" viewBox="0 0 24 24">
            <path d="M12,4V2A10,10 0 0,0 2,12H4A8,8 0 0,1 12,4Z"/>
          </svg>
          <span>⏱️ ${timeFormatted}</span>
        </div>
      `;
    };
    
    updateButtonText();
    
    // Armazena referência do timer atual
    currentTimer = setInterval(() => {
      countdown--;
      if (countdown > 0) {
        updateButtonText();
      } else {
        // Habilita o botão
        clearInterval(currentTimer);
        currentTimer = null;
        actionBtn.disabled = false;
        actionBtn.classList.remove('opacity-50', 'cursor-not-allowed');
        actionBtn.classList.add('hover:bg-red-700', 'transform', 'hover:scale-105');
        actionBtn.innerHTML = originalText;
        
        // Efeito visual de habilitação com notificação
        actionBtn.classList.add('animate-pulse');
        actionBtn.style.backgroundColor = '#10B981'; // Verde
        actionBtn.innerHTML = '✅ Aula Liberada!';
        
        setTimeout(() => {
          actionBtn.classList.remove('animate-pulse');
          actionBtn.style.backgroundColor = ''; // Volta ao vermelho
          actionBtn.innerHTML = originalText;
        }, 3000);
        
        // Notificação sonora simulada
        console.log('🔔 Aula liberada! Você pode marcar como concluída agora.');
      }
    }, 1000);
  }

  // Inicializar primeiro vídeo
  if (items.length > 0) {
    const firstItem = items[0];
    const videoUrl = firstItem.getAttribute('data-video');
    const id = firstItem.getAttribute('data-idVideo');
    const title = firstItem.querySelector('h3').textContent;
    updatePlayer(videoUrl, id, title);
    
    // Desabilita o botão por 40 minutos na inicialização
    console.log(`🚀 Inicializando primeira aula ${id} - Iniciando timer do botão`);
    disableButtonWithCountdown();
  }

  // Simulação de progresso
  setInterval(() => {
    if (videoSelecionadoId && Math.random() > 0.98) {
      console.log(`Progresso da aula ${videoSelecionadoId}: ${Math.floor(Math.random() * 100)}%`);
    }
  }, 5000);
</script>


</body>
</html>